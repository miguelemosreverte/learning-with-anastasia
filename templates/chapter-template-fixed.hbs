<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{meta.title.en}} - Educational Magazine</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Oswald:wght@400;600;700&family=Merriweather:wght@300;400;700&family=Source+Sans+Pro:wght@300;400;600&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        html {
            overflow-x: hidden;
            max-width: 100%;
        }
        
        body {
            font-family: 'Source Sans Pro', sans-serif;
            background: #f5f5f5;
            color: #333;
            line-height: 1.6;
            overflow-x: hidden;
            max-width: 100%;
            position: relative;
        }
        
        /* Header */
        .header {
            background: linear-gradient(135deg, #000 0%, #1a1a1a 100%);
            padding: 40px 0;
            text-align: center;
            border-bottom: 4px solid #FFCC00;
        }
        
        .header h1 {
            font-family: 'Oswald', sans-serif;
            font-size: 3rem;
            color: #FFCC00;
            text-transform: uppercase;
            letter-spacing: 2px;
        }
        
        .header p {
            color: #fff;
            font-size: 1.2rem;
            margin-top: 10px;
        }

        /* Language Switcher */
        .language-switcher {
            position: fixed;
            top: 20px;
            right: 20px;
            display: flex;
            gap: 15px;
            z-index: 1000;
            max-width: 200px;
        }
        
        .lang-btn {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: 3px solid transparent;
            cursor: pointer;
            transition: all 0.3s ease;
            overflow: hidden;
            position: relative;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
            background: white;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .lang-btn:hover {
            transform: scale(1.1);
            border-color: #FFCC00;
            box-shadow: 0 4px 20px rgba(255, 204, 0, 0.4);
        }
        
        .lang-btn.active {
            border-color: #FFCC00;
            transform: scale(1.05);
        }
        
        .flag-emoji {
            font-size: 28px;
            line-height: 1;
        }

        /* Hero Section */
        .hero-section {
            position: relative;
            height: 70vh;
            overflow: hidden;
            width: 100%;
            max-width: 100vw;
        }
        
        .hero-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .hero-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(to bottom, rgba(0,0,0,0.3), rgba(0,0,0,0.7));
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }
        
        .hero-title {
            font-family: 'Oswald', sans-serif;
            font-size: 4rem;
            color: #fff;
            text-transform: uppercase;
            text-align: center;
            text-shadow: 0 4px 20px rgba(0,0,0,0.7);
        }
        
        .hero-subtitle {
            font-family: 'Merriweather', serif;
            font-size: 1.5rem;
            color: #FFCC00;
            margin-top: 20px;
        }

        /* Content Sections */
        .content-section {
            max-width: 1200px;
            width: 100%;
            margin: 60px auto;
            padding: 0 20px;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 40px;
            align-items: center;
            overflow: hidden;
        }
        
        /* Action Sequence Sections - Indented sub-stories */
        .content-section.action-sequence {
            max-width: 1000px;
            margin: 30px auto;
            background: linear-gradient(90deg, transparent 0%, rgba(255,204,0,0.05) 10%, rgba(255,204,0,0.05) 90%, transparent 100%);
            border-left: 3px solid #FFCC00;
            padding-left: 40px;
            position: relative;
        }
        
        .content-section.action-sequence::before {
            content: '▸';
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: #FFCC00;
            font-size: 1.5rem;
        }
        
        .content-section.action-sequence .text-content h2 {
            font-size: 1.8rem;
            color: #666;
        }
        
        .content-section.action-sequence .image-container img {
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(255,204,0,0.2);
        }
        
        .content-section:nth-child(even) {
            direction: rtl;
        }
        
        .content-section:nth-child(even) .text-content {
            direction: ltr;
        }
        
        .text-content {
            padding: 30px;
        }
        
        .text-content h2 {
            font-family: 'Oswald', sans-serif;
            font-size: 2.5rem;
            color: #000;
            margin-bottom: 20px;
            text-transform: uppercase;
        }
        
        .text-content p {
            font-size: 1.1rem;
            line-height: 1.8;
            color: #444;
            margin-bottom: 15px;
        }
        
        .image-container {
            position: relative;
            overflow: hidden;
            border-radius: 8px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        
        .image-container img {
            width: 100%;
            max-width: 100%;
            height: auto;
            display: block;
            transition: transform 0.3s ease;
        }
        
        .image-container:hover img {
            transform: scale(1.05);
        }

        /* Fun Fact Cards */
        .fun-facts-section {
            background: #000;
            padding: 60px 20px;
            margin-top: 60px;
            margin-bottom: 0;
        }

        .fun-facts-container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .fun-facts-section h2 {
            font-family: 'Oswald', sans-serif;
            font-size: 3rem;
            color: #FFCC00;
            text-align: center;
            margin-bottom: 40px;
            text-transform: uppercase;
        }

        .facts-grid {
            display: flex;
            flex-direction: column;
            gap: 40px;
            max-width: 900px;
            margin: 0 auto;
        }

        .fact-card {
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
            border-left: 4px solid #FFCC00;
            transition: transform 0.3s ease;
            overflow: hidden;
        }

        .fact-card:hover {
            transform: translateY(-5px);
        }

        .fact-card-image {
            width: 100%;
            height: auto;
            display: block;
        }

        .fact-card-content {
            padding: 30px;
        }

        .fact-card h3 {
            font-family: 'Oswald', sans-serif;
            font-size: 1.5rem;
            color: #000;
            margin-bottom: 15px;
        }

        .fact-card p {
            color: #444;
            line-height: 1.6;
        }

        /* Viewer Details Section */
        .viewer-details {
            max-width: 1200px;
            margin: 60px auto;
            padding: 0 20px;
        }

        .viewer-details h2 {
            font-family: 'Oswald', sans-serif;
            font-size: 2.5rem;
            color: #000;
            margin-bottom: 30px;
            text-transform: uppercase;
            text-align: center;
        }

        .details-grid {
            display: flex;
            flex-direction: column;
            gap: 40px;
            max-width: 900px;
            margin: 0 auto;
        }

        .detail-card {
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }

        .detail-card:hover {
            transform: translateY(-5px);
        }

        .detail-card img {
            width: 100%;
            height: auto;
            display: block;
        }

        .detail-content {
            padding: 20px;
        }

        .detail-content h3 {
            font-family: 'Oswald', sans-serif;
            font-size: 1.3rem;
            color: #000;
            margin-bottom: 10px;
        }

        .detail-content p {
            color: #444;
            font-size: 0.95rem;
            line-height: 1.6;
        }

        /* Footer */
        .footer {
            background: #000;
            color: rgb(102, 102, 102);
            text-align: center;
            padding: 40px 20px;
            margin-top: 0;
            border-top: 2px solid rgb(255, 204, 0);
        }

        .footer p {
            font-family: "Source Sans Pro", sans-serif;
            font-size: 16px;
            margin-bottom: 10px;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .hero-title {
                font-size: 2.5rem;
            }

            .hero-subtitle {
                font-size: 1.2rem;
            }

            .content-section {
                grid-template-columns: 1fr;
            }
            
            .content-section.action-sequence {
                padding-left: 20px;
                margin: 20px auto;
            }

            .content-section:nth-child(even) {
                direction: ltr;
            }

            .header h1 {
                font-size: 2rem;
            }

            .text-content h2 {
                font-size: 1.8rem;
            }
        }

        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes fadeInDown {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Hide elements for language switching - but NOT the buttons themselves */
        [data-lang]:not(.active):not(.lang-btn) {
            display: none;
        }
        /* Main wrapper to prevent overflow */
        .main-wrapper {
            width: 100%;
            max-width: 100vw;
            overflow-x: hidden;
            position: relative;
        }
    </style>
</head>
<body>
<div class="main-wrapper">
    <!-- Language Switcher -->
    <div class="language-switcher">
        <button class="lang-btn active" data-lang="en" title="English">
            <div class="flag-emoji">🇬🇧</div>
        </button>
        <button class="lang-btn" data-lang="es" title="Español">
            <div class="flag-emoji">🇪🇸</div>
        </button>
        <button class="lang-btn" data-lang="ru" title="Русский">
            <div class="flag-emoji">🇷🇺</div>
        </button>
    </div>

    <!-- Header -->
    <header class="header">
        <h1 data-lang="en" class="active">{{meta.title.en}}</h1>
        <h1 data-lang="es">{{meta.title.es}}</h1>
        <h1 data-lang="ru">{{meta.title.ru}}</h1>
        <p data-lang="en" class="active">{{meta.subtitle.en}}</p>
        <p data-lang="es">{{meta.subtitle.es}}</p>
        <p data-lang="ru">{{meta.subtitle.ru}}</p>
    </header>

    <!-- Hero Section -->
    {{#if hero}}
    <section class="hero-section">
        <img src="assets/images/{{hero.image}}" 
             alt="{{hero.title.en}}" 
             class="hero-image critical"
             loading="eager">
        <div class="hero-overlay">
            <h2 class="hero-title" data-lang="en" class="active">{{hero.title.en}}</h2>
            <h2 class="hero-title" data-lang="es">{{hero.title.es}}</h2>
            <h2 class="hero-title" data-lang="ru">{{hero.title.ru}}</h2>
            <p class="hero-subtitle" data-lang="en" class="active">{{hero.subtitle.en}}</p>
            <p class="hero-subtitle" data-lang="es">{{hero.subtitle.es}}</p>
            <p class="hero-subtitle" data-lang="ru">{{hero.subtitle.ru}}</p>
        </div>
    </section>
    {{/if}}

    <!-- Content Sections -->
    {{#each sections}}
    <section class="content-section{{#if isActionSequence}} action-sequence{{/if}}">
        <div class="image-container">
            <img data-src="assets/images/{{image}}" 
                 src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1200 800'%3E%3Crect fill='%23f0f0f0'/%3E%3C/svg%3E"
                 alt="{{imageAlt.en}}" 
                 data-alt-en="{{imageAlt.en}}"
                 data-alt-es="{{imageAlt.es}}"
                 data-alt-ru="{{imageAlt.ru}}"
                 loading="lazy">
        </div>
        <div class="text-content">
            <h2 data-lang="en" class="active">{{title.en}}</h2>
            <h2 data-lang="es">{{title.es}}</h2>
            <h2 data-lang="ru">{{title.ru}}</h2>
            <div data-lang="en" class="active">
                <p>{{content.en}}</p>
            </div>
            <div data-lang="es">
                <p>{{content.es}}</p>
            </div>
            <div data-lang="ru">
                <p>{{content.ru}}</p>
            </div>
        </div>
    </section>
    {{/each}}

    <!-- Viewer Details Section -->
    {{#if viewerDetails}}
    <section class="viewer-details">
        <h2 data-lang="en" class="active">Did You Notice?</h2>
        <h2 data-lang="es">¿Te Diste Cuenta?</h2>
        <h2 data-lang="ru">Вы Заметили?</h2>
        <div class="details-grid">
            {{#each viewerDetails}}
            <div class="detail-card">
                {{#if image}}
                <img data-src="assets/images/{{image}}" 
                     src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 600 400'%3E%3Crect fill='%23f0f0f0'/%3E%3C/svg%3E"
                     alt="{{title.en}}"
                     loading="lazy">
                {{/if}}
                <div class="detail-content">
                    <h3 data-lang="en" class="active">{{title.en}}</h3>
                    <h3 data-lang="es">{{title.es}}</h3>
                    <h3 data-lang="ru">{{title.ru}}</h3>
                    <p data-lang="en" class="active">{{description.en}}</p>
                    <p data-lang="es">{{description.es}}</p>
                    <p data-lang="ru">{{description.ru}}</p>
                </div>
            </div>
            {{/each}}
        </div>
    </section>
    {{/if}}

    <!-- Fun Facts Section -->
    {{#if funFacts}}
    <section class="fun-facts-section">
        <div class="fun-facts-container">
            <h2 data-lang="en" class="active">{{funFacts.title.en}}</h2>
            <h2 data-lang="es">{{funFacts.title.es}}</h2>
            <h2 data-lang="ru">{{funFacts.title.ru}}</h2>
            <div class="facts-grid">
                {{#each funFacts.facts}}
                <div class="fact-card">
                    {{#if image}}
                    <img data-src="assets/images/{{image}}" 
                         src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 400 300'%3E%3Crect fill='%23f0f0f0'/%3E%3C/svg%3E"
                         alt="{{title.en}}" 
                         class="fact-card-image"
                         loading="lazy">
                    {{/if}}
                    <div class="fact-card-content">
                        <h3 data-lang="en" class="active">{{title.en}}</h3>
                        <h3 data-lang="es">{{title.es}}</h3>
                        <h3 data-lang="ru">{{title.ru}}</h3>
                        <p data-lang="en" class="active">{{content.en}}</p>
                        <p data-lang="es">{{content.es}}</p>
                        <p data-lang="ru">{{content.ru}}</p>
                    </div>
                </div>
                {{/each}}
            </div>
        </div>
    </section>
    {{/if}}

    <!-- Footer -->
    <footer class="footer">
        <p data-lang="en" class="active">© 2025 Learning with Anastasia - Educational Magazine Collection</p>
        <p data-lang="es">© 2025 Aprendiendo con Anastasia - Colección de Revistas Educativas</p>
        <p data-lang="ru">© 2025 Учимся с Анастасией - Коллекция образовательных журналов</p>
        {{#if meta.footerSubtitle}}
        <p data-lang="en" class="active" style="margin-top: 10px;">{{meta.footerSubtitle.en}}</p>
        <p data-lang="es" style="margin-top: 10px;">{{meta.footerSubtitle.es}}</p>
        <p data-lang="ru" style="margin-top: 10px;">{{meta.footerSubtitle.ru}}</p>
        {{/if}}
    </footer>

    <script>
        // Virtual rendering for performance and language switching
        class VirtualRenderer {
            constructor() {
                this.sections = [];
                this.visibleRange = { start: 0, end: 0 };
                this.buffer = 2; // Render 2 sections above and below viewport
                this.initialize();
            }
            
            initialize() {
                // Get all content sections
                this.sections = Array.from(document.querySelectorAll('.content-section'));
                
                // Store original HTML for each section
                this.sections.forEach((section, index) => {
                    section.dataset.sectionIndex = index;
                    section.dataset.originalHtml = section.innerHTML;
                });
                
                // Initial render
                this.updateVisibleSections();
                
                // Set up scroll listener with debouncing
                let scrollTimeout;
                window.addEventListener('scroll', () => {
                    clearTimeout(scrollTimeout);
                    scrollTimeout = setTimeout(() => this.updateVisibleSections(), 50);
                });
            }
            
            updateVisibleSections() {
                const viewportTop = window.scrollY - 500;
                const viewportBottom = window.scrollY + window.innerHeight + 500;
                
                let newStart = -1;
                let newEnd = -1;
                
                // Find visible sections
                this.sections.forEach((section, index) => {
                    const rect = section.getBoundingClientRect();
                    const sectionTop = rect.top + window.scrollY;
                    const sectionBottom = sectionTop + rect.height;
                    
                    if (sectionBottom >= viewportTop && sectionTop <= viewportBottom) {
                        if (newStart === -1) newStart = index;
                        newEnd = index;
                    }
                });
                
                // Add buffer
                newStart = Math.max(0, newStart - this.buffer);
                newEnd = Math.min(this.sections.length - 1, newEnd + this.buffer);
                
                // Only update if range changed
                if (newStart !== this.visibleRange.start || newEnd !== this.visibleRange.end) {
                    this.renderRange(newStart, newEnd);
                    this.visibleRange = { start: newStart, end: newEnd };
                }
            }
            
            renderRange(start, end) {
                this.sections.forEach((section, index) => {
                    if (index >= start && index <= end) {
                        // Render section if not already rendered
                        if (section.dataset.rendered !== 'true') {
                            section.innerHTML = section.dataset.originalHtml;
                            section.dataset.rendered = 'true';
                            // Re-apply language setting
                            const currentLang = localStorage.getItem('preferredLanguage') || 'en';
                            this.applyLanguageToSection(section, currentLang);
                        }
                    } else {
                        // Unrender section but keep placeholder
                        if (section.dataset.rendered === 'true') {
                            const height = section.offsetHeight;
                            section.innerHTML = `<div style="height: ${height}px; background: transparent;"></div>`;
                            section.dataset.rendered = 'false';
                        }
                    }
                });
            }
            
            applyLanguageToSection(section, lang) {
                // Hide all language elements in this section
                section.querySelectorAll('[data-lang]').forEach(el => {
                    el.classList.remove('active');
                });
                
                // Show selected language elements
                section.querySelectorAll(`[data-lang="${lang}"]`).forEach(el => {
                    el.classList.add('active');
                });
                
                // Update image alt texts
                section.querySelectorAll('img[data-alt-' + lang + ']').forEach(img => {
                    img.alt = img.getAttribute('data-alt-' + lang);
                });
            }
            
            refreshLanguage(lang) {
                // Only update rendered sections
                this.sections.forEach((section, index) => {
                    if (section.dataset.rendered === 'true') {
                        this.applyLanguageToSection(section, lang);
                    }
                });
            }
        }
        
        let virtualRenderer = null;
        // Language switching functionality
        function changeLanguage(lang) {
            // Find the most visible section before switching
            const sections = document.querySelectorAll('.content-section');
            let mostVisibleSection = null;
            let maxVisibility = 0;
            
            sections.forEach(section => {
                const rect = section.getBoundingClientRect();
                const viewportHeight = window.innerHeight;
                
                // Calculate how much of the section is visible
                const visibleTop = Math.max(0, Math.min(rect.bottom, viewportHeight));
                const visibleBottom = Math.max(0, rect.top);
                const visibleHeight = visibleTop - visibleBottom;
                
                if (visibleHeight > maxVisibility && rect.top < viewportHeight / 2) {
                    maxVisibility = visibleHeight;
                    mostVisibleSection = section;
                }
            });
            
            // If a section is partially visible at the top, scroll it fully into view
            if (mostVisibleSection) {
                const rect = mostVisibleSection.getBoundingClientRect();
                if (rect.top < 100 && rect.top > -50) {
                    mostVisibleSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    // Wait for scroll to complete
                    setTimeout(() => performLanguageSwitch(lang), 300);
                    return;
                }
            }
            
            performLanguageSwitch(lang);
        }
        
        function performLanguageSwitch(lang) {
            // Prevent any scroll changes
            const scrollPos = window.scrollY;
            document.body.style.overflow = 'hidden';
            document.body.style.position = 'fixed';
            document.body.style.top = `-${scrollPos}px`;
            document.body.style.width = '100%';
            
            // Update button states
            document.querySelectorAll('.lang-btn').forEach(btn => {
                btn.classList.remove('active');
                if (btn.getAttribute('data-lang') === lang) {
                    btn.classList.add('active');
                }
            });
            
            // Update non-section language elements (header, footer, etc)
            document.querySelectorAll('.header [data-lang], .footer [data-lang], .fun-facts-section [data-lang], .viewer-details [data-lang]').forEach(el => {
                el.classList.remove('active');
            });
            document.querySelectorAll(`.header [data-lang="${lang}"], .footer [data-lang="${lang}"], .fun-facts-section [data-lang="${lang}"], .viewer-details [data-lang="${lang}"]`).forEach(el => {
                el.classList.add('active');
            });
            
            // Use virtual renderer for content sections
            if (virtualRenderer) {
                virtualRenderer.refreshLanguage(lang);
            } else {
                // Fallback for non-virtual rendering
                document.querySelectorAll('[data-lang]').forEach(el => {
                    el.classList.remove('active');
                });
                document.querySelectorAll(`[data-lang="${lang}"]`).forEach(el => {
                    el.classList.add('active');
                });
                document.querySelectorAll('img[data-alt-' + lang + ']').forEach(img => {
                    img.alt = img.getAttribute('data-alt-' + lang);
                });
            }
            
            // Restore scroll exactly
            document.body.style.position = '';
            document.body.style.overflow = '';
            document.body.style.top = '';
            document.body.style.width = '';
            window.scrollTo(0, scrollPos);
            
            // Save preference
            localStorage.setItem('preferredLanguage', lang);
        }

        // Load saved language preference
        window.addEventListener('DOMContentLoaded', () => {
            // Initialize virtual renderer
            virtualRenderer = new VirtualRenderer();
            
            const savedLang = localStorage.getItem('preferredLanguage') || 'en';
            changeLanguage(savedLang);
            
            // Add click handlers to language buttons
            document.querySelectorAll('.lang-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    changeLanguage(this.getAttribute('data-lang'));
                });
            });
        });

        // Smooth scroll for internal links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({ behavior: 'smooth' });
                }
            });
        });
    </script>
</div>
    <script src="../assets/lazy-loading.js"></script>
    <script>
        // Preload critical images immediately
        if (window.preloadCriticalImages) {
            window.preloadCriticalImages();
        }
    </script>
</body>
</html>